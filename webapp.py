import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
rf_model = joblib.load("rf_model.pkl")
gb_model = joblib.load("gb_model.pkl")
scaler = joblib.load("scaler.pkl")
nn_model_boston = joblib.load("nn_model_boston.pkl")
scaler_boston = joblib.load("scaler_boston.pkl")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Sidebar Menu
st.sidebar.title("üìå Menu")
page = st.sidebar.radio(
    "üîç Select menu",
    [
        "üìñ Machine Learning",
        "üìä Ticket Price Prediction",
        "ü§ñ Neural Network",
        "üìà House Price Prediction"
    ]
)

st.title("Machine Learning & Neural Network Web Application üìä")

# ------------------- ‡∏´‡∏ô‡πâ‡∏≤ 1: Machine Learning Overview -------------------
if page == "üìñ Machine Learning":
    st.header("üìñ Machine Learning Overview")
    st.write("""
    ## üîç 1Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)
    - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: `titanic_dataset_with_missing.csv` ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    - ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:
        - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (`mean()`) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (Garc√≠a et al., 2010)
        - ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô **Feature** ‡πÅ‡∏•‡∏∞ **Target (Fare)** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        - ‡πÉ‡∏ä‡πâ `StandardScaler()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° (Han et al., 2011)

    ## üß† 2Ô∏è‚É£ ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (Machine Learning Algorithms)
    - **Random Forest (RF)**: ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÅ‡∏ö‡∏ö Ensemble Learning ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢ Decision Trees ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Overfitting ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (Breiman, 2001)
    - **Gradient Boosting (GB)**: ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Boosting ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (Friedman, 2001)

    ## üîß 3Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    - ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô **80% Training** ‡πÅ‡∏•‡∏∞ **20% Testing** ‡∏î‡πâ‡∏ß‡∏¢ `train_test_split()`
    - ‡πÉ‡∏ä‡πâ `StandardScaler()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• `RandomForestRegressor` ‡πÅ‡∏•‡∏∞ `GradientBoostingRegressor`
    - ‡πÉ‡∏ä‡πâ Mean Absolute Error (MAE) ‡πÅ‡∏•‡∏∞ R¬≤ Score ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Chicco et al., 2021)

    ### üìö ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:
    - Breiman, L. (2001). Random forests. *Machine learning*, 45(1), 5-32.
    - Friedman, J. H. (2001). Greedy function approximation: A gradient boosting machine. *Annals of statistics*, 1189-1232.
    - Garc√≠a, S., Luengo, J., & Herrera, F. (2010). Data preprocessing in data mining. *Springer*.
    - Han, J., Kamber, M., & Pei, J. (2011). Data mining: concepts and techniques. *Elsevier*.
    - Chicco, D., Warrens, M. J., & Jurman, G. (2021). The coefficient of determination R¬≤. *Computers in Biology and Medicine*, 138, 104857.
    """)

# ------------------- ‡∏´‡∏ô‡πâ‡∏≤ 2: Ticket Price Prediction -------------------
if page == "üìä Ticket Price Prediction":
    st.subheader("üîç Predict Ticket Price")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    if "df_ticket" not in st.session_state:
        df_ticket = pd.read_csv("titanic_dataset_with_missing.csv")
        st.session_state["df_ticket"] = df_ticket
    else:
        df_ticket = st.session_state["df_ticket"]

    features = df_ticket.drop(columns=['fare'], errors='ignore').columns.tolist()
    
    input_data = [st.number_input(f"{feature}", value=df_ticket[feature].mean()) for feature in features]
    
    if st.button("Predict Price"):
        input_array = np.array([input_data]).reshape(1, -1)
        input_scaled = scaler.transform(input_array)
        pred_rf = rf_model.predict(input_scaled)[0]
        pred_gb = gb_model.predict(input_scaled)[0]
        weighted_avg = (0.6 * pred_rf) + (0.4 * pred_gb)
        st.success(f"üéüÔ∏è Predicted Ticket Price: **${weighted_avg:.2f}**")

# ------------------- ‡∏´‡∏ô‡πâ‡∏≤ 3: Neural Network Overview -------------------
if page == "ü§ñ Neural Network":
    st.header("ü§ñ Neural Network Overview")
    st.write("""
    ## üîç 1Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)
    - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: `boston_housing_simulated_with_missing.csv`
    - ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:
        - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô (`median()`) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ outlier (Little & Rubin, 2019)
        - ‡πÉ‡∏ä‡πâ `StandardScaler()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á Neural Network (Lecun et al., 1998)

    ## üß† 2Ô∏è‚É£ ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (Neural Network)
    - ‡πÉ‡∏ä‡πâ **Multi-layer Perceptron (MLP Regressor)** ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Feedforward
    - ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•:
        - **Hidden Layers**: 4 ‡∏ä‡∏±‡πâ‡∏ô (`512, 256, 128, 64`) ‡∏û‡∏£‡πâ‡∏≠‡∏° Activation Function `ReLU`
        - **Optimization Algorithm**: ‡πÉ‡∏ä‡πâ `Adam` optimizer ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ learning rate ‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö Adaptive (Kingma & Ba, 2014)
        - **Early Stopping**: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏•‡∏î‡∏•‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Overfitting (Prechelt, 1998)

    ## üîß 3Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    - ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô **80% Training** ‡πÅ‡∏•‡∏∞ **20% Testing**
    - ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Scaling ‡∏î‡πâ‡∏ß‡∏¢ `StandardScaler()`
    - ‡πÉ‡∏ä‡πâ `MLPRegressor` ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
    - ‡πÉ‡∏ä‡πâ **Mean Absolute Error (MAE), Root Mean Squared Error (RMSE)** ‡πÅ‡∏•‡∏∞ **R¬≤ Score** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (Chicco et al., 2021)

    ### üìö ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:
    - LeCun, Y., Bottou, L., Bengio, Y., & Haffner, P. (1998). Gradient-based learning applied to document recognition. *Proceedings of the IEEE*, 86(11), 2278-2324.
    - Kingma, D. P., & Ba, J. (2014). Adam: A method for stochastic optimization. *arXiv preprint arXiv:1412.6980*.
    - Prechelt, L. (1998). Early stopping-but when? *Neural Networks: Tricks of the trade*, 55-69.
    - Little, R. J., & Rubin, D. B. (2019). Statistical analysis with missing data. *John Wiley & Sons*.
    - Chicco, D., Warrens, M. J., & Jurman, G. (2021). The coefficient of determination R¬≤. *Computers in Biology and Medicine*, 138, 104857.
    """)

# ------------------- ‡∏´‡∏ô‡πâ‡∏≤ 4: House Price Prediction -------------------
if page == "üìà House Price Prediction":
    st.subheader("üè° House Price Prediction (Neural Network)")

    # üîπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å session_state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if "df_housing" in st.session_state:
        del st.session_state["df_housing"]

    # üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    df_housing = pd.read_csv("boston_housing_simulated_with_missing.csv")
    df_housing.fillna(df_housing.median(), inplace=True)

    # üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô lowercase
    df_housing.columns = df_housing.columns.str.lower()

    # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å dataset ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô session_state
    st.session_state["df_housing"] = df_housing

    # üîπ ‡πÉ‡∏ä‡πâ Feature Name ‡∏ó‡∏µ‡πà Model ‡πÄ‡∏Ñ‡∏¢ Train
    features = list(scaler_boston.feature_names_in_)

    # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô dataset ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    missing_features = [f for f in features if f not in df_housing.columns]

    # üîπ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ 0 ‡πÉ‡∏´‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    for feature in missing_features:
        df_housing[feature] = 0  

    # üîπ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ
    df_housing = df_housing[features]

    # üîπ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ text_input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ)
    input_data = []
    for feature in features:
        value = st.text_input(f"{feature}", "0.0")  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô text_input
        try:
            value = float(value)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        except ValueError:
            value = 0.0  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ 0.0
        input_data.append(value)

    # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    if st.button("Predict House Price"):
        input_array = pd.DataFrame([input_data], columns=features)
        input_scaled = scaler_boston.transform(input_array)
        predicted_price = nn_model_boston.predict(input_scaled)[0]
        st.success(f"üè° Predicted House Price: **${predicted_price:.2f}**")

    # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ 'medv' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if "medv" in df_housing.columns:
        y_actual = df_housing["medv"]

        # üîπ ‡∏Å‡∏£‡∏≤‡∏ü Actual vs Predicted
        st.subheader("üìà Actual vs Predicted Prices")

        X_test = df_housing[features]
        X_test_scaled = scaler_boston.transform(X_test)
        y_predicted = nn_model_boston.predict(X_test_scaled)

        fig, ax = plt.subplots()
        ax.scatter(y_actual, y_predicted, color="blue", label="Predicted")
        ax.plot(
            [y_actual.min(), y_actual.max()],
            [y_actual.min(), y_actual.max()],
            color="red",
            linestyle="--",
            label="Ideal Fit",
        )
        ax.set_xlabel("Actual Prices")
        ax.set_ylabel("Predicted Prices")
        ax.set_title("Actual vs Predicted Prices (Neural Network)")
        ax.legend()
        st.pyplot(fig)
